From 7c5cd22643b478d2b27d5aea31427b17744a4d6c Mon Sep 17 00:00:00 2001
From: Kenton Varda <kenton@cloudflare.com>
Date: Tue, 23 May 2023 09:18:57 -0500
Subject: [PATCH 07/19] Make v8::Locker automatically call isolate->Enter().

This makes it no longer necessary to create a v8::Isolate::Scope after taking the lock.

More importantly, without this change, the Locker consturctor will segfault when V8 is compiled with pointer compression enabled but shared pointer cages disabled, also known as multi-cage mode. This change ensures that the cage base pointers are set up immediately after taking the lock, before other code runs that depends on them.

This is a major change in API semantics, however, which makes it unlikely to be upstreamable.
---
 src/execution/v8threads.cc | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/execution/v8threads.cc b/src/execution/v8threads.cc
index 4205817b73f..91e1a43d305 100644
--- a/src/execution/v8threads.cc
+++ b/src/execution/v8threads.cc
@@ -40,6 +40,7 @@ void Locker::Initialize(v8::Isolate* isolate) {
   if (!isolate_->thread_manager()->IsLockedByCurrentThread()) {
     isolate_->thread_manager()->Lock();
     has_lock_ = true;
+    isolate_->Enter();
 
     // This may be a locker within an unlocker in which case we have to
     // get the saved state for this thread and restore it.
@@ -64,6 +65,7 @@ Locker::~Locker() {
     } else {
       isolate_->thread_manager()->ArchiveThread();
     }
+    isolate_->Exit();
     isolate_->thread_manager()->Unlock();
   }
 }
-- 
2.34.1

